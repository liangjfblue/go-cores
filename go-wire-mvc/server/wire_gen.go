// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"go-wire-mvc/config"
	coin2 "go-wire-mvc/controllers/coin"
	user2 "go-wire-mvc/controllers/user"
	"go-wire-mvc/dao"
	"go-wire-mvc/models"
	"go-wire-mvc/router"
	"go-wire-mvc/service"
	"go-wire-mvc/service/coin"
	"go-wire-mvc/service/user"
)

// Injectors from wire.go:

func NewAppServer(path string) (*AppServer, error) {
	configConfig, err := config.ProvideConfig(path)
	if err != nil {
		return nil, err
	}
	db, err := models.ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	daoDao, err := dao.ProvideDao(db)
	if err != nil {
		return nil, err
	}
	srvUser, err := user.ProvideSrvUser(daoDao)
	if err != nil {
		return nil, err
	}
	srvCoin, err := coin.ProvideSrvCoin(daoDao)
	if err != nil {
		return nil, err
	}
	serviceService, err := service.ProvideService(srvUser, srvCoin)
	if err != nil {
		return nil, err
	}
	handleUser, err := user2.ProvideHandleUser(serviceService)
	if err != nil {
		return nil, err
	}
	handleCoin, err := coin2.ProvideHandleCoin(serviceService)
	if err != nil {
		return nil, err
	}
	routerRouter, err := router.ProvideRouter(configConfig, handleUser, handleCoin)
	if err != nil {
		return nil, err
	}
	appServer := &AppServer{
		Config: configConfig,
		router: routerRouter,
	}
	return appServer, nil
}
